#!/usr/bin/env bash
set -e
[ -n "$ST2_DEBUG" ] && set -x

print_set_version() {
  echo "<version> should be a string matching a Ruby version known by st2."

  local versions="$(st2-versions --bare)"
  if [ -z "$versions" ]; then
    echo "There are currently no Ruby versions installed for st2."
  else
    echo "The currently installed Ruby versions are:"
    echo "$versions" | sed 's/^/  /'
  fi

  echo
  echo "The special version string 'system' will use your default system Ruby."
}

case "$1" in
"") echo "usage: st2 <command> [<args>]

Some useful st2 commands are:
   commands      List all st2 commands
   rehash        Rehash st2 shims (run this after installing binaries)
   global        Set or show the global Ruby version
   local         Set or show the local directory-specific Ruby version
   shell         Set or show the shell-specific Ruby version
   version       Show the current Ruby version
   versions      List all Ruby versions known by st2
   which         Show the full path for the given Ruby command
   whence        List all Ruby versions with the given command

See 'st2 help <command>' for information on a specific command.
For full documentation, see: https://github.com/sstephenson/st2#readme"
;;
commands) echo "usage: st2 commands
       st2 commands --sh
       st2 commands --no-sh

List all st2 commands."
;;
global) echo "usage: st2 global <version>

Sets the global Ruby version. You can override the global version at
any time by setting a directory-specific version with \`st2 local'
or by setting the ST2_VERSION environment variable.

$(print_set_version)"
;;
local) echo "usage: st2 local <version>
       st2 local --unset

Sets the local directory-specific Ruby version by writing the version
name to a file named '.st2-version'.

When you run a Ruby command, st2 will look for an '.st2-version'
file in the current directory and each parent directory. If no such
file is found in the tree, st2 will use the global Ruby version
specified with \`st2 global', or the version specified in the
ST2_VERSION environment variable.

$(print_set_version)"
;;
shell) echo "usage: st2 shell <version>
       st2 shell --unset

Sets a shell-specific Ruby version by setting the 'ST2_VERSION'
environment variable in your shell. This version overrides both
project-specific versions and the global version.

$(print_set_version)"
;;
versions) echo "usage: st2 versions
       st2 versions --bare

Lists all Ruby versions known by st2."
;;
which) echo "usage: st2 which <command>

Displays the full path to the binary that st2 will execute when you
run the given command."
;;
whence) echo "usage: st2 whence <command>

Lists all Ruby versions with the given command installed."
;;
*)
  command_path="$(command -v "st2-$1" || true)"
  if [ -n "$command_path" ]; then
    echo "Sorry, the \`$1' command isn't documented yet."
    echo
    echo "You can view the command's source here:"
    echo "$command_path"
    echo
  else
    echo "st2: no such command \`$1'"
  fi
esac
